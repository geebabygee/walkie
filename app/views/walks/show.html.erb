<%= render 'shared/carousel' %>

<div class="buttons">
  <span class="normal-button btn btn-default btn-circle far fa-heart go-rounded-white text-center"></span>
  <span class="normal-button btn btn-default btn-circle fas fa-share-alt go-rounded-white text-center" onclick=""></span>
  <span class="go-button btn btn-default btn-circle go-rounded-white text-center" style="margin-left: 30vw ;" data-target="#myModal" data-toggle="modal">GO</span>
  <!-- Button trigger modal -->


<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content" style='width: 100%; height: 95vh;'>
        <div id='map' style=' height: 95vh;'></div>
        <div id='instructions'></div>
    </div>
  </div>
</div>

</div>
<div class="container">

  <div class="row">
    <div class="col-xs-12">
      <br>
      <br>
      <div class="d-inline categories">
        <h4><%= @walk.category.name%></h4>
       <h2><strong> <%=@walk.name %></strong></h2>
       <br>
       <h6>&nbsp&nbsp<%= @walk.duration %>&nbsp&nbsp&nbsp<i class="far fa-clock"></i>&nbsp&nbsp&nbsp<%= @walk.location%></h6>
       <hr>
       <p>
        <p><%= @walk.description %></p>
        <br>
      </p>
    </div>
  </div>
</div>







<% unless @walk.points.empty?%>
<div class="timeline">
  <div class="timeline__container container">
    <div class="timeline__start-line"></div>
    <div class="timeline__start">
      <h4>Points of interest</h4>
    </div>
    <% @walk.points.each do |point| %>
    <div class="timeline__item">
      <div class="timeline-item__line">
        <div class="timeline-item__line--circle"></div>
      </div>
      <div class="timeline-item__details">
        <div class="timeline-item__image" style="background-image: url('<%= image_path point.photo %>')">
        </div>
        <div class="timeline-item__legend">
          <p><%= point.order %>.<%=point.name %></p>
          <div><%= point.description %>.</div>
        </div>
      </div>
    </div>
    <% end %>
    <div class="timeline__end-line"></div>
    <div class="timeline__end">
      <h4>End</h4>
    </div>
  </div>
</div>

<% end %>

<br>
<br>

<!--     <h3>Gab Dehan</h3>
    <p>10/07/17</p>
  </div>
  <div class="message-body">
    <p><strong>I am not sure yet!</strong></p>
    <p>
      I am not sure yet! I might be in Shanghai at this moment... Can I tell you later?
    </p>
  </div>
  <div class="message-status">
    <p class="status pending">Pending</p>
    <p class="price">â‚¬345</p>
  </div>
</div> -->







 <div>
  <h4>Reviews</h4>
  <% @reviews.each  do |review| %>
  <div class="message">
    <%= image_tag review.user.photo, class: "avatar-large" %>
  <div class="message-name">
    <h3><%=  review.user.first_name %></h3>
        <h3><%=  review.user.last_name %></h3>

  </div>
    <div class="message-body">
      "<%= review.content %>"
    </div>
  </div>
  <% end %>
</div>




  <script>
    var points = <%= raw @walk.points.to_json %>;

    mapboxgl.accessToken = 'pk.eyJ1IjoiZnJhbmNpc2NvYmFycmV0byIsImEiOiJjamVoMWRjMjMwbWh6MnFuczF6dGd6bmFoIn0.S5h45dvXuYQ3xoN-d504KA'; // replace this with your access token
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v10', // replace this with your style
      center: [points[0].longitude, points[0].latitude],
      zoom: 13
    });


    // Add zoom and rotation controls to the map.
    map.addControl(new mapboxgl.NavigationControl());

    var coordinates = [];
    var features = [];
    points.forEach((point) => {
      coordinates.push([point.longitude, point.latitude]);

      var feature = {
                      "type": "Feature",
                      "properties": {
                          "description": point.description,
                          "icon": "bicycle"
                      },
                      "geometry": {
                          "type": "Point",
                          "coordinates": [point.longitude, point.latitude]
                      }
                  }

      features.push(feature);

    });


  function getRoute() {

    var start = [points[0].longitude, points[0].latitude];
    var end = [points[6].longitude, points[6].latitude];

     var directionsRequest1 =
     'https://api.mapbox.com/directions/v5/mapbox/cycling/'
     + coordinates[0][0] + ',' + coordinates[0][1] + ';'
     + coordinates[1][0] + ',' + coordinates[1][1] + ';'
     + coordinates[2][0] + ',' + coordinates[2][1] + ';'
     + coordinates[3][0] + ',' + coordinates[3][1] + ';'
     + coordinates[4][0] + ',' + coordinates[4][1] + ';'
     + coordinates[5][0] + ',' + coordinates[5][1] + ';'
     + coordinates[6][0] + ',' + coordinates[6][1]
     + '?geometries=geojson&access_token=' + mapboxgl.accessToken;


    var directionsRequest = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?geometries=geojson&access_token=' + mapboxgl.accessToken;

    $.ajax({
      method: 'GET',
      url: directionsRequest1,
    }).done(function(data) {
      var route = data.routes[0].geometry
      var instructions = document.getElementById('instructions');
      var steps = data.routes[0].legs[0].steps;
      steps.forEach(function(step) {
        instructions.insertAdjacentHTML('beforeend', '<p>' + step.maneuver.instruction + '</p>');
      });


      map.addLayer({
        id: 'route',
        type: 'line',
        source: {
          type: 'geojson',
          data: {
            type: 'Feature',
            geometry: route
          }
        },
        paint: {
          'line-width': 3,
          'line-color': "#D17BC9"
        }
      });
      // this is where the code from the next step will go
      map.addLayer({
      id: 'start',
      type: 'circle',
      source: {
        type: 'geojson',
        data: {
          type: 'Feature',
          geometry: {
            type: 'Point',
            coordinates: start
          }
        }
      }
    });
    map.addLayer({
      id: 'end',
      type: 'circle',
      source: {
        type: 'geojson',
        data: {
          type: 'Feature',
          geometry: {
            type: 'Point',
            coordinates: end
          }
        }
      }
    });
    });


  }

map.on('load', function () {

      getRoute();



        // map.addLayer({
        //     "id": "route",
        //     "type": "line",
        //     "source": {
        //         "type": "geojson",
        //         "data": {
        //             "type": "Feature",
        //             "properties": {},
        //             "geometry": {
        //                 "type": "LineString",
        //                 "coordinates": coordinates
        //             }
        //         }
        //     },
        //     "layout": {
        //         "line-join": "round",
        //         "line-cap": "round"
        //     },
        //     "paint": {
        //         "line-color": "#D17BC9",
        //         "line-width": 5
        //     }
        // });




        map.addLayer({
          "id": "places",
          "type": "symbol",
          "source": {
              "type": "geojson",
              "data": {
                  "type": "FeatureCollection",
                  "features": features


              }
          },
                "layout": {
                  "icon-image": "{icon}-15",
                  "icon-allow-overlap": true
                }
      });

        map.addLayer({
          id: 'start',
          type: 'circle',
          source: {
            type: 'geojson',
            data: {
              type: 'Feature',
              geometry: {
                type: 'Point',
                coordinates: start
              }
            }
          }
        });
        map.addLayer({
          id: 'end',
          type: 'circle',
          source: {
            type: 'geojson',
            data: {
              type: 'Feature',
              geometry: {
                type: 'Point',
                coordinates: end
              }
            }
          }
        });
    });

    map.on('click', 'places', function (e) {
        var coordinates = e.features[0].geometry.coordinates.slice();
        var description = e.features[0].properties.description;


        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        new mapboxgl.Popup()
            .setLngLat(coordinates)
            .setHTML(description)
            .addTo(map);
    });

     // Change the cursor to a pointer when the mouse is over the places layer.
    map.on('mouseenter', 'places', function () {
        map.getCanvas().style.cursor = 'pointer';
    });

    // Change it back to a pointer when it leaves.
    map.on('mouseleave', 'places', function () {
        map.getCanvas().style.cursor = '';
    });

    map.addControl(new mapboxgl.FullscreenControl());



  </script>
  </div>





<style>

  #instructions {
  position: absolute;
  margin: 20px;
  width: 25%;
  top: 0;
  bottom: 0;
  padding: 20px;
  background-color: rgba(255, 255, 255, 0.9);
  overflow-y: scroll;
  font-family: sans-serif;
}





</style>

















<section class="white-stripe arrow">
 <div class="container">
  <h3>Destinations</h3>
 </div>
</section>

